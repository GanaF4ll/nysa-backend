generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum User_type {
  USER
  ORGANISATION
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

enum Event_visibility {
  PUBLIC
  PRIVATE
  FRIENDSONLY
}

enum Member_status {
  CONFIRMED
  LEFT
  KICKED
}

enum Invitation_status {
  PENDING
  ACCEPTED
  REFUSED
}

enum Message_status {
  SENT
  DELIVERED
  READ
}

enum Message_type {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}

enum Notification_type {
  EVENT
  MESSAGE
  FRIEND_REQUEST
  ORGANISATION
}

enum Provider {
  FACEBOOK
  GOOGLE
  NYSA
}

model Users {
  id         String    @id @default(cuid())
  type       User_type @default(USER) @map("type")
  email      String    @unique
  password   String?
  name       String?
  firstname  String?
  lastname   String?
  birthdate  DateTime?
  sex        Sex?      @map("sex")
  phone      String?
  image_url  String?
  bio        String?
  provider   Provider  @default(NYSA)
  active     Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  Event_member        Event_members[]
  Message             Messages[]
  Event               Events[]
  Conversation_member Conversation_members[]
  Get_notification    Get_notifications[]

  Event_Invitations Event_Invitations[]
}

model Events {
  id               String           @id @default(cuid())
  creator_id       String
  title            String           @db.VarChar(50)
  description      String           @db.VarChar(1000)
  address          String
  latitude         Float
  longitude        Float
  start_time       DateTime         @db.Timestamp()
  end_time         DateTime         @db.Timestamp()
  image            String?
  max_participants Int
  visibility       Event_visibility @map("visibility")
  entry_fee        Float
  view_count       Int?             @default(0)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  Event_member     Event_members[]
  Event_images     Event_images[]
  user             Users            @relation(fields: [creator_id], references: [id])

  Event_Invitations Event_Invitations[]
}

model Event_members {
  event_id   String
  user_id    String
  status     Member_status @map("status")
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  event      Events        @relation(fields: [event_id], references: [id])
  user       Users         @relation(fields: [user_id], references: [id])

  @@id([event_id, user_id])
}

model Event_Invitations {
  id         String            @id @default(cuid())
  user_id    String
  inviter_id String
  event_id   String
  status     Invitation_status @map("status")
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt

  Event Events @relation(fields: [event_id], references: [id])
  User  Users  @relation(fields: [user_id], references: [id])
}

model Conversations {
  id         String   @id @default(cuid())
  name       String
  is_private Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Message             Messages[]
  Conversation_member Conversation_members[]
}

model Messages {
  id              String        @id @default(cuid())
  conversation_id String
  conversation    Conversations @relation(fields: [conversation_id], references: [id])
  sender_id       String
  sender          Users         @relation(fields: [sender_id], references: [id])
  content         String
  status          String
  type            Message_type
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model Conversation_members {
  conversation_id String
  user_id         String
  is_admin        Boolean @default(false)

  conversation Conversations @relation(fields: [conversation_id], references: [id])
  // relation avec Auth ou User en fonction de si une orga peut être membre d'une conversation
  user         Users         @relation(fields: [user_id], references: [id])

  @@id([conversation_id, user_id])
}

model Notifications {
  id               String              @id @default(cuid())
  target_id        String
  target_type      String
  type             Notification_type   @map("type")
  created_at       DateTime            @default(now())
  updated_at       DateTime            @updatedAt
  Get_notification Get_notifications[]
}

// Pas sûr d'avoir capté le système de notification
model Get_notifications {
  id              String   @id @default(cuid())
  notification_id String
  user_id         String
  content         String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user Users @relation(fields: [id], references: [id])

  Notification Notifications @relation(fields: [notification_id], references: [id])
}

model Event_images {
  id         String   @id @default(cuid())
  event_id   String
  url        String
  order      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Event Events @relation(fields: [event_id], references: [id])
}
